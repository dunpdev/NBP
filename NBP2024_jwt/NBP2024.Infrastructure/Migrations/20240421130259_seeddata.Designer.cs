// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NBP2024.Infrastructure;

#nullable disable

namespace NBP2024.Infrastructure.Migrations
{
    [DbContext(typeof(PlutoContext))]
    [Migration("20240421130259_seeddata")]
    partial class seeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseTag", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("CourseTag");
                });

            modelBuilder.Entity("NBP2024.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mosh Hamedani"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Anthony Alicea"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Eric Wise"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tom Owsiak"
                        },
                        new
                        {
                            Id = 5,
                            Name = "John Smith"
                        });
                });

            modelBuilder.Entity("NBP2024.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CoverId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FullPrice")
                        .HasColumnType("real");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CoverId")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CoverId = 1,
                            Description = "Description for C# Basics",
                            FullPrice = 49f,
                            Level = 1,
                            Name = "C# Basics"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CoverId = 2,
                            Description = "Description for C# Intermediate",
                            FullPrice = 49f,
                            Level = 2,
                            Name = "C# Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            CoverId = 3,
                            Description = "Description for C# Advanced",
                            FullPrice = 69f,
                            Level = 3,
                            Name = "C# Advanced"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CoverId = 4,
                            Description = "Description for Javascript",
                            FullPrice = 149f,
                            Level = 2,
                            Name = "Javascript: Understanding the Weird Parts"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            CoverId = 5,
                            Description = "Description for AngularJS",
                            FullPrice = 99f,
                            Level = 2,
                            Name = "Learn and Understand AngularJS"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            CoverId = 6,
                            Description = "Description for NodeJS",
                            FullPrice = 149f,
                            Level = 2,
                            Name = "Learn and Understand NodeJS"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            CoverId = 7,
                            Description = "Description for Programming for Beginners",
                            FullPrice = 45f,
                            Level = 1,
                            Name = "Programming for Complete Beginners"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            CoverId = 8,
                            Description = "Description 16 Hour Course",
                            FullPrice = 150f,
                            Level = 1,
                            Name = "A 16 Hour C# Course with Visual Studio 2013"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 4,
                            CoverId = 9,
                            Description = "Description Learn Javascript",
                            FullPrice = 20f,
                            Level = 1,
                            Name = "Learn JavaScript Through Visual Studio 2013"
                        });
                });

            modelBuilder.Entity("NBP2024.Domain.Models.Cover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cover");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 0
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 0
                        });
                });

            modelBuilder.Entity("NBP2024.Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "c#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "angularjs"
                        },
                        new
                        {
                            Id = 3,
                            Name = "javascript"
                        },
                        new
                        {
                            Id = 4,
                            Name = "nodejs"
                        },
                        new
                        {
                            Id = 5,
                            Name = "oop"
                        },
                        new
                        {
                            Id = 6,
                            Name = "linq"
                        });
                });

            modelBuilder.Entity("CourseTag", b =>
                {
                    b.HasOne("NBP2024.Domain.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NBP2024.Domain.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NBP2024.Domain.Models.Course", b =>
                {
                    b.HasOne("NBP2024.Domain.Models.Author", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NBP2024.Domain.Models.Cover", "Cover")
                        .WithOne("Course")
                        .HasForeignKey("NBP2024.Domain.Models.Course", "CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("NBP2024.Domain.Models.Author", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("NBP2024.Domain.Models.Cover", b =>
                {
                    b.Navigation("Course")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
